#!/bin/bash
SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

#set -x
set -e

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

#
# system: node & npm  #NB - this triggers an apt-get update
#
if ! (which nodejs 1>/dev/null 2>&1) ; then
  echo "Installing NodeJs & NPM ..."
  # Note the new setup script name for Node.js v0.12
  curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -
  apt-get install -y nodejs
fi
echo "nodejs: $(nodejs -v)" | head -n 1

#
# system: docker
#
if ! (which docker 1>/dev/null 2>&1) ; then
  echo "Installing docker..."

  wget -qO- https://get.docker.com/ubuntu/ | sh
fi
echo "docker: $(docker --version 2>&1)" | head -n 1


#
# system: docker-compose
#
if ! (which docker-compose 1>/dev/null 2>&1) ; then
  echo "Installing docker-compose..."
   curl -L https://github.com/docker/compose/releases/download/1.4.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
   chmod +x /usr/local/bin/docker-compose
fi
echo "docker-compose: $(docker-compose --version 2>&1)" | head -n 1

#
# system: apparmor
# Fixes: set apparmor profile docker-default: no such file or directory
# http://stackoverflow.com/questions/23571900/docker-failing-to-load-apparmor-profile-upon-ubuntu-host-boot
#
if [ $(dpkg-query -W -f='${Status}' apparmor 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  apt-get install apparmor -y
fi
echo "apparmor: installed"

#Fix
if [ "`tail -1 /root/.profile`" = "mesg n" ]; then
  echo 'Patching basebox to prevent future `stdin: is not a tty` errors...'
  sed -i '$d' /root/.profile
  cat << 'EOH' >> /root/.profile
  if `tty -s`; then
    mesg n
  fi
EOH
fi

#
# system: curl
#
if [ ! -f /usr/bin/curl ]; then
  echo "Installing curl"
  apt-get install curl -y
fi
echo "curl: $(curl --version)" | head -n 1


#
# system: ruby 2.1.4p265 - replace Ubuntu's ruby 1.9 with the BOSH packaged version of ruby
#
if [[ ! "$(ruby -v)" =~ "ruby 2.1." ]]; then
  echo "Replacing Ubuntu's ruby 1.9 with the BOSH packaged version of ruby "
  apt-get remove ruby -y
  rm -rf /usr/local/bin/aws-rb
  rm -rf /usr/local/bin/blobstore_client_console
  rm -rf /usr/local/bin/bosh-template
  rm -rf /usr/local/bin/fog
  rm -rf /usr/local/bin/htmldiff
  rm -rf /usr/local/bin/httpclient
  rm -rf /usr/local/bin/minitar
  rm -rf /usr/local/bin/nokogiri
  rm -rf /usr/local/bin/rake

  echo "Ensuring Ruby 2.1 is in the path"
  echo "export PATH=$PATH:/var/vcap/packages/ruby/bin" >> /etc/profile.d/ruby2.1.sh # for future sessions
  PATH=$PATH:/var/vcap/packages/ruby/bin # for the rest of this script
fi
echo "ruby: $(ruby -v)" | head -n 1

#
# util: bosh-workspace
# This pulls bosh_cli as a dep
if ! (gem list bosh-workspace | grep bosh-workspace 1>/dev/null 2>&1) ; then
  echo "Installing bosh-workspace"
  apt-get install pkg-config -y
  yes y | gem install bosh-workspace -v 0.9.0 --no-ri --no-rdoc
fi
echo "bosh-workspace: $(gem list bosh-workspace)" | tail -n 1

#
# util: patch bosh_cli to add string diffing of changesets
#
if ! (gem list diff-lcs | grep diff-lcs 1>/dev/null 2>&1) ; then
  echo "Patching bosh_cli to add string diffing of changesets"

  gem install diff-lcs --no-ri --no-rdoc
  (
    cd /var/vcap/packages/ruby/lib/ruby/gems/2.1.0/gems/bosh_cli-1.*
    patch -p0 < $SCRIPT_DIR/patches/bosh_cli-string-diff.patch
  )
fi
echo "bosh_cli: Patched to add string diffing of changesets"

echo "bosh_cli: make sure we use the newly installed bosh_cli bin"
sudo rm /usr/local/bin/bosh
sudo ln -s /var/vcap/packages/ruby/lib/ruby/gems/2.1.0/gems/bosh_cli-*/bin/bosh /usr/local/bin/bosh

#
# util: bosh-gen
if ! (gem list bosh-gem | grep bosh-gen 1>/dev/null 2>&1) ; then
  echo "Installing bosh-gen"
  gem install bosh-gen --no-ri --no-rdoc
fi
echo "bosh-gen: $(gem list bosh-gen)" | tail -n 1

#
# system: git
#
if [ ! -f /usr/bin/git ]; then
  echo "Installing git"
  apt-get install git-core -y
fi
echo "git: $(git --version)"

#
# system: bsdtar
#
if ! (which bsdtar 1>/dev/null 2>&1) ; then
  echo "Installing bsdtar"
  apt-get install bsdtar -y
fi
echo "bsdtar: $(bsdtar --version)"

#
# util: cloudfoundry spiff
#
if ! (which spiff 1>/dev/null 2>&1) ; then
  echo "Installing spiff..."

  curl -L https://github.com/cloudfoundry-incubator/spiff/releases/download/v1.0.6/spiff_linux_amd64.zip | bsdtar -xvf- -C /usr/bin
  chmod +x /usr/bin/spiff

fi
echo "spiff: $(spiff --version)" | head -n 1

#
# system: zip and unzip
#
if ! (which zip 1>/dev/null 2>&1) ; then
  echo "Installing zip and unzip"
  apt-get install zip unzip -y
fi
echo "zip/unzip: $(zip -v | head -n 1)/$(unzip -v | head -n 1)"

#
#
# system: hg
#
if ! (which hg 1>/dev/null 2>&1) ; then
  echo "Installing Mecurial"
  apt-get install mercurial -y
fi
echo "hg: $(hg --version)" | head -n 1

#
# system: java
#
if ! (which java 1>/dev/null 2>&1) ; then
  echo "Installing OpenJDK 8..."
  add-apt-repository -y ppa:openjdk-r/ppa
  apt-get update
  apt-get install -y openjdk-8-jdk
  echo 'export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"' >> /etc/profile
fi
echo "java: $(java -version 2>&1 | awk -F '\\"' '/version/ { print $2 }')"

#
# system: maven-3
#
if ! (which mvn 1>/dev/null 2>&1) ; then
  echo "Installing maven 3.3.3..."
  curl http://mirrors.ukfast.co.uk/sites/ftp.apache.org/maven/maven-3/3.3.3/binaries/apache-maven-3.3.3-bin.tar.gz | tar xz -C /usr/local/
  ln -s /usr/local/apache-maven-3.3.3/bin/mvn /usr/local/bin/mvn
fi
echo "maven: $(mvn -version) | head -n 1"

#
# system: grunt-cli
#
if ! (which grunt 1>/dev/null 2>&1) ; then
  echo "Installing Grunt cli ..."

  npm install -g grunt-cli
fi
echo "grunt: $(grunt --version)" | head -n 1

#
# system: bower
#
if ! (which bower 1>/dev/null 2>&1) ; then
  echo "Installing Grunt cli ..."

  npm install -g bower
fi
echo "bower: $( bower --version)" | head -n 1

#
# system: jekyll
#
if ! (which jekyll 1>/dev/null 2>&1) ; then
  echo "Installing jekyll ..."
  gem install jekyll --no-rdoc --no-ri
fi
echo "jekyll: $(jekyll -version)" | head -n 1

#
# system: logstash
#
LOGSTASH_VERSION="1.5.0-rc3"
if [ ! -f /usr/local/logstash-$LOGSTASH_VERSION/bin/logstash ]; then
  echo "Installing logstash-$LOGSTASH_VERSION ..."
  curl -L "https://download.elastic.co/logstash/logstash/logstash-$LOGSTASH_VERSION.tar.gz" | tar -xzf- -C /usr/local
  echo "Installing Logstash plugins.  This takes a few minutes..."
  (
    cd /usr/local/logstash-$LOGSTASH_VERSION
    bin/plugin install --development # so we can use logstash rspec
    bin/plugin install logstash-filter-alter
    bin/plugin install logstash-filter-translate
  )
  echo "Fixing permissions"
  chmod a+r+w /usr/local/logstash-$LOGSTASH_VERSION/.bundle/config
  echo "Patching output/syslog plugin to support structured_data..."
  curl -L https://raw.githubusercontent.com/logsearch/logstash-output-syslog/master/lib/logstash/outputs/syslog.rb > /usr/local/logstash-$LOGSTASH_VERSION/lib/logstash/outputs/syslog.rb
  echo "Ensuring logstash is in the path"
  echo "export LOGSTASH_VERSION=\"${LOGSTASH_VERSION}\"" > /etc/profile.d/logstash.sh
  echo "export PATH=/usr/local/logstash-${LOGSTASH_VERSION}/bin:$PATH" >> /etc/profile.d/logstash.sh
fi
echo "logstash: v$LOGSTASH_VERSION"

#
# util: drip
#
if ! (which drip 1>/dev/null 2>&1) ; then
  echo "Installing drip..."

  curl -L https://raw.githubusercontent.com/ninjudd/drip/master/bin/drip > /usr/bin/drip
  chmod 755 /usr/bin/drip
  drip # Run once to download
fi
echo "drip: $(drip version)" | head -n 1

#
# util: vim
#
if ! (which vim 1>/dev/null 2>&1) ; then
  echo "Installing vim..."

  apt-get install -y vim
fi
echo "vim: $(vim --version)" | head -n 1

#
# util: emacs
#
if ! (which emacs 1>/dev/null 2>&1) ; then
  echo "Installing emacs"

  apt-get install -y emacs
fi
echo "emacs: $(emacs --version)" | head -n 1

#
# util: tig
#
if ! (which tig 1>/dev/null 2>&1) ; then
  echo "Installing tig..."

  apt-get install -y tig
fi
echo "tig: $(tig --version)" | head -n 1

#
# util: floomatic
#
if ! (which floomatic 1>/dev/null 2>&1) ; then
  echo "Installing floomatic..."

  apt-get install -y libqt4-dev
  npm install -g floomatic
fi
echo "floomatic: installed" # printing the actual version number currently throws an ugly warning: $(floomatic --version)" | head -n 1

#
# util: jq 1.4
#
if [[ ! "$(jq --version)" =~ "jq-1.4" ]]; then
  echo "Installing JQ 1.4..."

  curl -L http://stedolan.github.io/jq/download/linux64/jq > /usr/bin/jq
  sudo chmod +x /usr/bin/jq
fi
echo "jq: $(jq --version 2>&1)" | head -n 1

#
# util: htop
#
if ! (which htop 1>/dev/null 2>&1) ; then
  echo "Installing htop..."

  apt-get install htop -y
fi
echo "htop: $(htop --version 2>&1)" | head -n 1

#
# util: tree
#
if ! (which siege 1>/dev/null 2>&1) ; then
  echo "Installing siege"

  apt-get install siege -y
fi
echo "siege: $(siege --version 2>&1)" | head -n 1

#
# util: tree
#
if ! (which tree 1>/dev/null 2>&1) ; then
  echo "Installing tree..."

  apt-get install tree -y
fi
echo "tree: $(tree --version 2>&1)" | head -n 1

#
# util: httparty
#
if ! (which httparty 1>/dev/null 2>&1) ; then
  echo "Installing httparty"

  gem install httparty --no-ri --no-rdoc
fi
echo "httparty: $(httparty --version 2>&1)" | head -n 1

#
# util: tree
#
if ! (which rake 1>/dev/null 2>&1) ; then
  echo "Installing Rake..."

  gem install rake --no-ri --no-rdoc
fi
echo "rake: $(rake --version 2>&1)" | head -n 1

#
# util: Shrink vagrant VM
#
cp $SCRIPT_DIR/shrink_vagrant_box_for_packaging /root/shrink_vagrant_box_for_packaging

#
# system: awscli
#
if ! (which aws 1>/dev/null 2>&1) ; then
  echo "Installing aws cli..."

  apt-get install -y python
  curl "https://bootstrap.pypa.io/get-pip.py" -o "/root/get-pip.py"
  python /root/get-pip.py
  pip install --upgrade awscli httpie
  bash -c "complete -C '/usr/bin/aws_completer' aws"
fi
echo "awscli: $(aws --version 2>&1)" | head -n 1
echo "python: $(python --version 2>&1)" | head -n 1

# Ensure all users have access to /tmp
chmod 777 /tmp

# Display "help" at login
cp $SCRIPT_DIR/motd /etc/motd

# Allow forwarding of all ENV variables via SSH
sed -i 's/AcceptEnv\ LANG/AcceptEnv\ \*\ LANG/g' /etc/ssh/sshd_config
service ssh reload

# Forward traffic to the warden containers
if [ $(dpkg-query -W -f='${Status}' iptables-persistent 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
1  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
  apt-get install iptables-persistent -y
fi

echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
echo "Dependancy provisioning completed!"
echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
